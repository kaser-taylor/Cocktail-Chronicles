{"ast":null,"code":"// So this enables angular routing. This does a lot of things but in this case it will let us pass the url from the url into our cocktail card service\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/cocktail-card.service\";\nimport * as i3 from \"@angular/common\";\nfunction CocktailDetailComponent_div_0_li_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ingredient_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", ingredient_r1.ingredient, \" - \", ingredient_r1.measure, \" \");\n  }\n}\nfunction CocktailDetailComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 2);\n    i0.ɵɵelementStart(4, \"div\")(5, \"p\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Category:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Glass:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\")(14, \"strong\");\n    i0.ɵɵtext(15, \"Instructions:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\")(18, \"h4\");\n    i0.ɵɵtext(19, \"Ingredients\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"ul\");\n    i0.ɵɵtemplate(21, CocktailDetailComponent_div_0_li_21_Template, 2, 2, \"li\", 3);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.cocktail.strDrink);\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate(\"alt\", ctx_r1.cocktail.strDrink);\n    i0.ɵɵproperty(\"src\", ctx_r1.cocktail.strDrinkThumb, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strCategory, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strGlass, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strInstructions, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getIngredientsList());\n  }\n}\n// Tells angular the following class is a component and to use this info for it\nexport let CocktailDetailComponent = /*#__PURE__*/(() => {\n  class CocktailDetailComponent {\n    route;\n    cocktailcardservice;\n    // sets a variable to hold the data from our observable\n    cocktail;\n    // runs these privately when a component is created and REMEMBER THIS IS HOW YOU INJECT DEPENDENCIES YOUVE DONE THIS A BUNCH \n    constructor(\n    // this listens to changes in the URL and lets you grab the query parameters. remember we need the cocktail ID to search for it\n    route, cocktailcardservice) {\n      this.route = route;\n      this.cocktailcardservice = cocktailcardservice;\n    }\n    // this is a life cycle hook in angualr that runs automagically when the component loads\n    ngOnInit() {\n      // grabs the id from the url this.route refers to the injected dependency in the constructor, .snapshot is a property of the dependency that contains a static snapshot of the route at the time of the request .paramMap is an object that provides access to route paratmesters. they are defined in the route with a colon: an example is /cocktial/:id. finally the .get gets the parameters from paramMap with the given variable in the call in this case id\n      const cocktailId = this.route.snapshot.paramMap.get('id');\n      // an if statement saying if there is a cocktailId then we do this\n      if (cocktailId) {\n        // this calls our cocktail card servcice to get the cocktails by the id we snagged early and subsribes to the obervable of the service\n        this.cocktailcardservice.getCocktailDetailsById(cocktailId).subscribe({\n          // next means it happens if the api responds sucessfully and it uses the ternary operator to set cocktail = to the response and = to null if there are no drinks so the app doesn't crash\n          next: response => {\n            this.cocktail = response.drinks ? response.drinks[0] : null;\n            // So basically if there is a response from the api it calls the get ingredients function\n            if (this.cocktail) {\n              this.getIngredientsList();\n            }\n          },\n          // error is what displays if the observable or api fails\n          error: error => {\n            console.error('Error fetching cocktail details', error);\n          }\n        });\n      }\n    }\n    getIngredientsList() {\n      // Okay so this creates an array of objects {}[] in typescript we have to declare the types of the values coming from the object which is an ingredient: with a string data type and a measure: also with a string data type.\n      const ingredients = [];\n      for (let i = 1; i <= 15; i++) {\n        // creates an ingredient variable that pulls from the cocktail object returned by the api. The api gives its response like this {'strIngredient1': 'tequila', 'strIngredient2': ''} since this object is one index we use one of those fancy strings that we can put variables in and incremement the number at the end. following that we declare a variable for measure that does the same thing\n        const ingredient = this.cocktail[`strIngredient${i}`];\n        const measure = this.cocktail[`strMeasure${i}`];\n        if (ingredient) {\n          ingredients.push({\n            ingredient,\n            measure: measure ? measure.trim() : ''\n          });\n        }\n      }\n      return ingredients;\n    }\n    static ɵfac = function CocktailDetailComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CocktailDetailComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CocktailCardService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CocktailDetailComponent,\n      selectors: [[\"app-cocktail-detail\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"cocktail-detail-card\", 4, \"ngIf\"], [1, \"cocktail-detail-card\"], [3, \"src\", \"alt\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function CocktailDetailComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, CocktailDetailComponent_div_0_Template, 22, 7, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.cocktail);\n        }\n      },\n      dependencies: [CommonModule, i3.NgForOf, i3.NgIf, RouterModule],\n      styles: [\"*[_ngcontent-%COMP%]{margin:0;padding:0;box-sizing:border-box}.cocktail-detail-card[_ngcontent-%COMP%]{background-color:#fefae0;display:flex;flex-direction:column;align-items:center;justify-content:space-evenly;width:85%;border-radius:10%}.cocktail-detail-card[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:25%;border-radius:15%}.cocktail-detail-card[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]{margin:10px}\"]\n    });\n  }\n  return CocktailDetailComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}