{"ast":null,"code":"// we're gonna use the ngif and ngfor for our html generation\nimport { CommonModule } from '@angular/common';\n// so this allows us to use that router link thing that looks like [routerLink] in the html\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/cocktail.service\";\nimport * as i2 from \"../../services/search.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = a0 => [\"/cocktail\", a0];\nfunction ResultsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"div\", 2);\n    i0.ÉµÉµtext(1);\n    i0.ÉµÉµelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ÉµÉµnextContext();\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nfunction ResultsComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ÉµÉµelementStart(0, \"li\")(1, \"div\", 3)(2, \"h3\");\n    i0.ÉµÉµtext(3);\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelement(4, \"img\", 4);\n    i0.ÉµÉµelementEnd()();\n  }\n  if (rf & 2) {\n    const cocktail_r2 = ctx.$implicit;\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµproperty(\"routerLink\", i0.ÉµÉµpureFunction1(4, _c0, cocktail_r2.idDrink));\n    i0.ÉµÉµadvance(2);\n    i0.ÉµÉµtextInterpolate(cocktail_r2.strDrink);\n    i0.ÉµÉµadvance();\n    i0.ÉµÉµpropertyInterpolate(\"alt\", cocktail_r2.strDrink);\n    i0.ÉµÉµproperty(\"src\", cocktail_r2.strDrinkThumb, i0.ÉµÉµsanitizeUrl);\n  }\n}\n// the OnInit calls it immediately on the lifecycle hook\nexport let ResultsComponent = /*#__PURE__*/(() => {\n  class ResultsComponent {\n    cocktailService;\n    searchService;\n    router;\n    // So this is going to be an array that we hold the cocktail api return in and its kinda like a variable in decleration and we do the : because this is an object and then since this is typescript we have to declare the type lol so any[]\n    cocktails = [];\n    // So we include this in case the api returns an error\n    errorMessage = '';\n    // no we need to inject our dependencies directly into the class. the reason we only put values in here and not\n    // logic to process is because in the angular lifecycle it will automagically populate the curly braces with the logic\n    // from the dependencies you inject so it looks blank but Actually ðŸ¤“ it will contain logic\n    constructor(\n    // pulls cocktail api\n    cocktailService,\n    // pulls search term from bar\n    searchService,\n    // lets us change router url\n    router) {\n      this.cocktailService = cocktailService;\n      this.searchService = searchService;\n      this.router = router;\n    }\n    ngOnInit() {\n      // this . calls search service injection . calls get search term from search service . subscribes to the oberservable from cocktail api by calling listDrinks from it with the argument term from the search service\n      this.searchService.getSearchTerm().subscribe(term => {\n        this.listDrinks(term);\n      });\n    }\n    // creating the function that gathers the item lists\n    listDrinks(searchTerm) {\n      // this changes the url to clear the search results and details from the last query\n      this.router.navigate(['/']);\n      // this resets the array on a new search\n      this.cocktails = [];\n      // calls the search by Name from the cocktail service which returns an observable notice we use the parameter passed into the this.listDrinks\n      this.cocktailService.searchByName(searchTerm).subscribe({\n        // this sets the first value of the object to next and sets next to an arrow function passing the response from the observable as a parameter. this.cocktails = the response.drinks use drinks because thats how cocktail db response if it returns nothing than you set it to an empty array\n        next: response => {\n          // so response checks if there even is one response.drinks checks if .drinks is part of response and .drinks.length checks if the length is greater than 0 then we can append to the array\n          if (response && response.drinks && response.drinks.length > 0) {\n            // we push it on the array so we can have ingredients and named cocktails\n            this.cocktails.push(...response.drinks);\n          }\n        },\n        error: err => {\n          console.error('error occurred:', err);\n        }\n      });\n      this.cocktailService.searchByIngredient(searchTerm).subscribe({\n        // this sets the first value of the object to next and sets next to an arrow function passing the response from the observable as a parameter. this.cocktails = the response.drinks use drinks because thats how cocktail db response if it returns nothing than you set it to an empty array\n        next: response => {\n          // so response checks if there even is one response.drinks checks if .drinks is part of response and .drinks.length checks if the length is greater than 0 then we can append to the array\n          if (response && response.drinks && response.drinks.length > 0) {\n            // we push it on the array so we can have ingredients and named cocktails\n            this.cocktails.push(...response.drinks);\n          }\n        },\n        error: err => {\n          console.error('error occurred:', err);\n        }\n      });\n    }\n    static Éµfac = function ResultsComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ResultsComponent)(i0.ÉµÉµdirectiveInject(i1.CocktailService), i0.ÉµÉµdirectiveInject(i2.SearchService), i0.ÉµÉµdirectiveInject(i3.Router));\n    };\n    static Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n      type: ResultsComponent,\n      selectors: [[\"app-results\"]],\n      decls: 3,\n      vars: 2,\n      consts: [[\"class\", \"error\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"error\"], [1, \"cocktail-card\", 3, \"routerLink\"], [3, \"src\", \"alt\"]],\n      template: function ResultsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ÉµÉµtemplate(0, ResultsComponent_div_0_Template, 2, 1, \"div\", 0);\n          i0.ÉµÉµelementStart(1, \"ul\");\n          i0.ÉµÉµtemplate(2, ResultsComponent_li_2_Template, 5, 6, \"li\", 1);\n          i0.ÉµÉµelementEnd();\n        }\n        if (rf & 2) {\n          i0.ÉµÉµproperty(\"ngIf\", ctx.errorMessage);\n          i0.ÉµÉµadvance(2);\n          i0.ÉµÉµproperty(\"ngForOf\", ctx.cocktails);\n        }\n      },\n      dependencies: [CommonModule, i4.NgForOf, i4.NgIf, RouterModule, i3.RouterLink],\n      styles: [\"*[_ngcontent-%COMP%] {\\n    margin: 0;\\n    padding: 0;\\n    box-sizing: border-box;\\n  }\\n\\nli[_ngcontent-%COMP%] {\\n    list-style: none;\\n    margin: 10px;\\n    color: #19220e;\\n}\\n\\n.cocktail-card[_ngcontent-%COMP%] {\\n    background-color: #fefae0;\\n    border-radius: 10%;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: space-evenly;\\n    width: 45%\\n\\n}\\n\\n.cocktail-card[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n    width: 25%;\\n}\\n\\n.cocktail-card[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n    width: 50%;\\n    border-radius: 10%;\\n    margin-bottom: 5%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZXN1bHRzL3Jlc3VsdHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1Ysc0JBQXNCO0VBQ3hCOztBQUVGO0lBQ0ksZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixjQUFjO0FBQ2xCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtJQUNuQiw2QkFBNkI7SUFDN0I7O0FBRUo7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLGlCQUFpQjtBQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIioge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxubGkge1xuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgbWFyZ2luOiAxMHB4O1xuICAgIGNvbG9yOiAjMTkyMjBlO1xufVxuXG4uY29ja3RhaWwtY2FyZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZlZmFlMDtcbiAgICBib3JkZXItcmFkaXVzOiAxMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgd2lkdGg6IDQ1JVxuXG59XG5cbi5jb2NrdGFpbC1jYXJkIGgzIHtcbiAgICB3aWR0aDogMjUlO1xufVxuXG4uY29ja3RhaWwtY2FyZCBpbWcge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgYm9yZGVyLXJhZGl1czogMTAlO1xuICAgIG1hcmdpbi1ib3R0b206IDUlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return ResultsComponent;\n})();","map":{"version":3,"names":["CommonModule","RouterModule","i0","ÉµÉµelementStart","ÉµÉµtext","ÉµÉµelementEnd","ÉµÉµadvance","ÉµÉµtextInterpolate1","ctx_r0","errorMessage","ÉµÉµelement","ÉµÉµproperty","ÉµÉµpureFunction1","_c0","cocktail_r2","idDrink","ÉµÉµtextInterpolate","strDrink","ÉµÉµpropertyInterpolate","strDrinkThumb","ÉµÉµsanitizeUrl","ResultsComponent","cocktailService","searchService","router","cocktails","constructor","ngOnInit","getSearchTerm","subscribe","term","listDrinks","searchTerm","navigate","searchByName","next","response","drinks","length","push","error","err","console","searchByIngredient","ÉµÉµdirectiveInject","i1","CocktailService","i2","SearchService","i3","Router","selectors","decls","vars","consts","template","ResultsComponent_Template","rf","ctx","ÉµÉµtemplate","ResultsComponent_div_0_Template","ResultsComponent_li_2_Template","i4","NgForOf","NgIf","RouterLink","styles"],"sources":["/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/results/results.component.ts","/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/results/results.component.html"],"sourcesContent":["// so we import the onInit because itll let us run some code on the initialization of the the component we end up using this to subsribe to the search term\nimport { Component, OnInit } from '@angular/core';\n// we're gonna use the ngif and ngfor for our html generation\nimport { CommonModule } from '@angular/common';\n// this lets us use the cocktail service that we wrote that actually calls the api to search\nimport { CocktailService } from '../../services/cocktail.service';\n// this is the search bar service that gives us the term\nimport { SearchService } from '../../services/search.service';\n// so this allows us to use that router link thing that looks like [routerLink] in the html\nimport { Router, RouterModule } from '@angular/router';\n\n\n@Component({\n    selector: 'app-results',\n    // injects the imports into the component\n    imports: [CommonModule, RouterModule],\n    templateUrl: './results.component.html',\n    styleUrl: './results.component.css'\n})\n\n// the OnInit calls it immediately on the lifecycle hook\nexport class ResultsComponent implements OnInit {\n    // So this is going to be an array that we hold the cocktail api return in and its kinda like a variable in decleration and we do the : because this is an object and then since this is typescript we have to declare the type lol so any[]\n    cocktails: any[] = [];\n\n    // So we include this in case the api returns an error\n    errorMessage: string = '';\n\n    // no we need to inject our dependencies directly into the class. the reason we only put values in here and not\n    // logic to process is because in the angular lifecycle it will automagically populate the curly braces with the logic\n    // from the dependencies you inject so it looks blank but Actually ðŸ¤“ it will contain logic\n    constructor(\n        // pulls cocktail api\n        private cocktailService: CocktailService,\n        // pulls search term from bar\n        private searchService: SearchService,\n        // lets us change router url\n        private router: Router\n    ) {}\n\n    ngOnInit(): void {\n        // this . calls search service injection . calls get search term from search service . subscribes to the oberservable from cocktail api by calling listDrinks from it with the argument term from the search service\n        this.searchService.getSearchTerm().subscribe((term: string) => {this.listDrinks(term)});\n}\n    // creating the function that gathers the item lists\n    listDrinks(searchTerm: string) {\n        // this changes the url to clear the search results and details from the last query\n        this.router.navigate(['/'])\n\n        // this resets the array on a new search\n        this.cocktails = []\n\n        // calls the search by Name from the cocktail service which returns an observable notice we use the parameter passed into the this.listDrinks\n        this.cocktailService.searchByName(searchTerm).subscribe({\n            // this sets the first value of the object to next and sets next to an arrow function passing the response from the observable as a parameter. this.cocktails = the response.drinks use drinks because thats how cocktail db response if it returns nothing than you set it to an empty array\n            next: (response) => {\n                // so response checks if there even is one response.drinks checks if .drinks is part of response and .drinks.length checks if the length is greater than 0 then we can append to the array\n                if (response && response.drinks && response.drinks.length > 0) {\n                    // we push it on the array so we can have ingredients and named cocktails\n                    this.cocktails.push(...response.drinks)\n                }\n            },\n\n          error: (err) => {\n            console.error('error occurred:', err);\n          }\n        })\n\n        this.cocktailService.searchByIngredient(searchTerm).subscribe({\n            // this sets the first value of the object to next and sets next to an arrow function passing the response from the observable as a parameter. this.cocktails = the response.drinks use drinks because thats how cocktail db response if it returns nothing than you set it to an empty array\n            next: (response) => {\n                // so response checks if there even is one response.drinks checks if .drinks is part of response and .drinks.length checks if the length is greater than 0 then we can append to the array\n                if (response && response.drinks && response.drinks.length > 0) {\n                    // we push it on the array so we can have ingredients and named cocktails\n                    this.cocktails.push(...response.drinks)\n                }\n            },\n\n            error: (err) => {\n                console.error('error occurred:', err);\n              }\n        })\n\n\n    }\n}\n","<div *ngIf=\"errorMessage\" class=\"error\"> {{ errorMessage }} </div>\n\n<ul>\n    <li *ngFor=\"let cocktail of cocktails\">\n        <div [routerLink]=\"['/cocktail', cocktail.idDrink]\" class=\"cocktail-card\">\n            <h3>{{cocktail.strDrink}}</h3>\n            <img [src]=\"cocktail.strDrinkThumb\" alt=\"{{ cocktail.strDrink }}\">\n        </div>\n\n    </li>\n</ul>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}