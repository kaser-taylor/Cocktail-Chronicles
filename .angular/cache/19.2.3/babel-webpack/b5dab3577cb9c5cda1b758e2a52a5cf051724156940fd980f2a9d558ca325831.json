{"ast":null,"code":"// So the forms module basically connects the form the backend component logic to direct the play, enables that two way data binding we were looking up\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/search.service\";\nimport * as i2 from \"@angular/forms\";\n// remember export allows us to use it in other parts of our project\nexport let SearchBarComponent = /*#__PURE__*/(() => {\n  class SearchBarComponent {\n    searchService;\n    // now we need to create the variable that holds the search term of the user. Remember that this is typescript so we have to declare the type\n    searchTerm = '';\n    // so this enables the dependency injection of search service into this class. We will be using this to push searchTerm to the other components\n    constructor(searchService) {\n      this.searchService = searchService;\n    }\n    onSearch() {\n      // creates a trimmed version of the term for the API\n      const trimmedTerm = this.searchTerm.trim();\n      // if trimmed term is truthy (if there is one) then sets the search service search term\n      if (trimmedTerm) {\n        this.searchService.setSearchTerm(trimmedTerm);\n      }\n    }\n    static ɵfac = function SearchBarComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SearchBarComponent)(i0.ɵɵdirectiveInject(i1.SearchService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SearchBarComponent,\n      selectors: [[\"app-search-bar\"]],\n      decls: 4,\n      vars: 1,\n      consts: [[1, \"search-container\"], [\"type\", \"text\", \"placeholder\", \"search cocktails ...\", 1, \"search-input\", 3, \"ngModelChange\", \"keyup.enter\", \"ngModel\"], [3, \"click\"]],\n      template: function SearchBarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function SearchBarComponent_Template_input_ngModelChange_1_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.searchTerm, $event) || (ctx.searchTerm = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"keyup.enter\", function SearchBarComponent_Template_input_keyup_enter_1_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function SearchBarComponent_Template_button_click_2_listener() {\n            return ctx.onSearch();\n          });\n          i0.ɵɵtext(3, \" Search\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.searchTerm);\n        }\n      },\n      dependencies: [FormsModule, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n  return SearchBarComponent;\n})();","map":{"version":3,"names":["FormsModule","SearchBarComponent","searchService","searchTerm","constructor","onSearch","trimmedTerm","trim","setSearchTerm","i0","ɵɵdirectiveInject","i1","SearchService","selectors","decls","vars","consts","template","SearchBarComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtwoWayListener","SearchBarComponent_Template_input_ngModelChange_1_listener","$event","ɵɵtwoWayBindingSet","ɵɵlistener","SearchBarComponent_Template_input_keyup_enter_1_listener","ɵɵelementEnd","SearchBarComponent_Template_button_click_2_listener","ɵɵtext","ɵɵadvance","ɵɵtwoWayProperty","i2","DefaultValueAccessor","NgControlStatus","NgModel","styles"],"sources":["/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/search-bar/search-bar.component.ts","/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/search-bar/search-bar.component.html"],"sourcesContent":["// So what this import does: Component, allows the component decorator and the class to talk to eachother; EventEmitter and Output, allows the component to send data to a parent component.\nimport { Component, EventEmitter, Output } from '@angular/core'\n// So the forms module basically connects the form the backend component logic to direct the play, enables that two way data binding we were looking up\nimport { FormsModule } from '@angular/forms';\n// So this will allow us to use our search service which basically created a mailing list for the search term\nimport { SearchService } from '../../services/search.service';\n\n\n@Component({\n    selector: 'app-search-bar',\n    templateUrl: './search-bar.component.html',\n    styleUrls: ['./search-bar.component.css'],\n    standalone: true,\n    // this is a dependency injection that allows us to use the from module directly in the component\n    imports: [FormsModule]\n})\n\n// remember export allows us to use it in other parts of our project\nexport class SearchBarComponent {\n    // now we need to create the variable that holds the search term of the user. Remember that this is typescript so we have to declare the type\n    searchTerm: string = '';\n\n    // so this enables the dependency injection of search service into this class. We will be using this to push searchTerm to the other components\n    constructor(private searchService: SearchService) {}\n\n    onSearch() {\n        // creates a trimmed version of the term for the API\n        const trimmedTerm = this.searchTerm.trim();\n        // if trimmed term is truthy (if there is one) then sets the search service search term\n        if (trimmedTerm) {\n            this.searchService.setSearchTerm(trimmedTerm);\n        }\n    }\n}\n\n// So basically the run down of this component is it takes a search value and then emits it to the parent function\n","<!-- first we set up a div for our search bar with a class for styling -->\n<div class=\"search-container\">\n    <!-- the [ngModule] sets up the two way binding to the searchTerm variable in our components class which remember takes a string as an argument. it syncs the input fields text automatically with the variable in the sending class and updates upon ui changes -->\n     <!-- the keyup.enter listens for an enter key to be pressed to call the onsearch method to sent the term to the parent component of this component -->\n    <input \n        type=\"text\"\n        [(ngModel)]=\"searchTerm\"\n        placeholder=\"search cocktails ...\"\n        (keyup.enter)=\"onSearch()\"\n        class=\"search-input\"\n    >\n    <!-- this adds a button to submit the form that does a similar thing to the keyup.enter -->\n    <button (click)=\"onSearch()\"> Search</button>\n</div>"],"mappings":"AAEA;AACA,SAASA,WAAW,QAAQ,gBAAgB;;;;AAc5C;AACA,WAAaC,kBAAkB;EAAzB,MAAOA,kBAAkB;IAKPC,aAAA;IAJpB;IACAC,UAAU,GAAW,EAAE;IAEvB;IACAC,YAAoBF,aAA4B;MAA5B,KAAAA,aAAa,GAAbA,aAAa;IAAkB;IAEnDG,QAAQA,CAAA;MACJ;MACA,MAAMC,WAAW,GAAG,IAAI,CAACH,UAAU,CAACI,IAAI,EAAE;MAC1C;MACA,IAAID,WAAW,EAAE;QACb,IAAI,CAACJ,aAAa,CAACM,aAAa,CAACF,WAAW,CAAC;MACjD;IACJ;;uCAdSL,kBAAkB,EAAAQ,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,aAAA;IAAA;;YAAlBX,kBAAkB;MAAAY,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCd3BV,EAHJ,CAAAY,cAAA,aAA8B,eASzB;UAJGZ,EAAA,CAAAa,gBAAA,2BAAAC,2DAAAC,MAAA;YAAAf,EAAA,CAAAgB,kBAAA,CAAAL,GAAA,CAAAjB,UAAA,EAAAqB,MAAA,MAAAJ,GAAA,CAAAjB,UAAA,GAAAqB,MAAA;YAAA,OAAAA,MAAA;UAAA,EAAwB;UAExBf,EAAA,CAAAiB,UAAA,yBAAAC,yDAAA;YAAA,OAAeP,GAAA,CAAAf,QAAA,EAAU;UAAA,EAAC;UAJ9BI,EAAA,CAAAmB,YAAA,EAMC;UAEDnB,EAAA,CAAAY,cAAA,gBAA6B;UAArBZ,EAAA,CAAAiB,UAAA,mBAAAG,oDAAA;YAAA,OAAST,GAAA,CAAAf,QAAA,EAAU;UAAA,EAAC;UAAEI,EAAA,CAAAqB,MAAA,cAAM;UACxCrB,EADwC,CAAAmB,YAAA,EAAS,EAC3C;;;UAPEnB,EAAA,CAAAsB,SAAA,EAAwB;UAAxBtB,EAAA,CAAAuB,gBAAA,YAAAZ,GAAA,CAAAjB,UAAA,CAAwB;;;qBDQlBH,WAAW,EAAAiC,EAAA,CAAAC,oBAAA,EAAAD,EAAA,CAAAE,eAAA,EAAAF,EAAA,CAAAG,OAAA;MAAAC,MAAA;IAAA;;SAIZpC,kBAAkB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}