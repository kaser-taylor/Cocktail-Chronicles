{"ast":null,"code":"// So this enables angular routing. This does a lot of things but in this case it will let us pass the url from the url into our cocktail card service\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/cocktail-card.service\";\nimport * as i3 from \"@angular/common\";\nfunction CocktailDetailComponent_div_0_li_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ingredient_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", ingredient_r1.ingredient, \" - \", ingredient_r1.measure, \" \");\n  }\n}\nfunction CocktailDetailComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 2);\n    i0.ɵɵelementStart(4, \"div\")(5, \"p\")(6, \"strong\");\n    i0.ɵɵtext(7, \"Category:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"p\")(10, \"strong\");\n    i0.ɵɵtext(11, \"Glass:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\")(14, \"strong\");\n    i0.ɵɵtext(15, \"Instructions:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\")(18, \"h4\");\n    i0.ɵɵtext(19, \"Ingredients\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"ul\");\n    i0.ɵɵtemplate(21, CocktailDetailComponent_div_0_li_21_Template, 2, 2, \"li\", 3);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.cocktail.strDrink);\n    i0.ɵɵadvance();\n    i0.ɵɵpropertyInterpolate(\"alt\", ctx_r1.cocktail.strDrink);\n    i0.ɵɵproperty(\"src\", ctx_r1.cocktail.strDrinkThumb, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strCategory, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strGlass, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.cocktail.strInstructions, \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getIngredientsList());\n  }\n}\n// Tells angular the following class is a component and to use this info for it\nexport let CocktailDetailComponent = /*#__PURE__*/(() => {\n  class CocktailDetailComponent {\n    route;\n    cocktailcardservice;\n    // sets a variable to hold the data from our observable\n    cocktail;\n    // runs these privately when a component is created and REMEMBER THIS IS HOW YOU INJECT DEPENDENCIES YOUVE DONE THIS A BUNCH \n    constructor(\n    // this listens to changes in the URL and lets you grab the query parameters. remember we need the cocktail ID to search for it\n    route, cocktailcardservice) {\n      this.route = route;\n      this.cocktailcardservice = cocktailcardservice;\n    }\n    // this is a life cycle hook in angualr that runs automagically when the component loads\n    ngOnInit() {\n      // grabs the id from the url this.route refers to the injected dependency in the constructor, .snapshot is a property of the dependency that contains a static snapshot of the route at the time of the request .paramMap is an object that provides access to route paratmesters. they are defined in the route with a colon: an example is /cocktial/:id. finally the .get gets the parameters from paramMap with the given variable in the call in this case id\n      const cocktailId = this.route.snapshot.paramMap.get('id');\n      // an if statement saying if there is a cocktailId then we do this\n      if (cocktailId) {\n        // this calls our cocktail card servcice to get the cocktails by the id we snagged early and subsribes to the obervable of the service\n        this.cocktailcardservice.getCocktailDetailsById(cocktailId).subscribe({\n          // next means it happens if the api responds sucessfully and it uses the ternary operator to set cocktail = to the response and = to null if there are no drinks so the app doesn't crash\n          next: response => {\n            this.cocktail = response.drinks ? response.drinks[0] : null;\n            // So basically if there is a response from the api it calls the get ingredients function\n            if (this.cocktail) {\n              this.getIngredientsList();\n            }\n          },\n          // error is what displays if the observable or api fails\n          error: error => {\n            console.error('Error fetching cocktail details', error);\n          }\n        });\n      }\n    }\n    getIngredientsList() {\n      // Okay so this creates an array of objects {}[] in typescript we have to declare the types of the values coming from the object which is an ingredient: with a string data type and a measure: also with a string data type.\n      const ingredients = [];\n      for (let i = 1; i <= 15; i++) {\n        // creates an ingredient variable that pulls from the cocktail object returned by the api. The api gives its response like this {'strIngredient1': 'tequila', 'strIngredient2': ''} since this object is one index we use one of those fancy strings that we can put variables in and incremement the number at the end. following that we declare a variable for measure that does the same thing\n        const ingredient = this.cocktail[`strIngredient${i}`];\n        const measure = this.cocktail[`strMeasure${i}`];\n        if (ingredient) {\n          ingredients.push({\n            ingredient,\n            measure: measure ? measure.trim() : ''\n          });\n        }\n      }\n      return ingredients;\n    }\n    static ɵfac = function CocktailDetailComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CocktailDetailComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CocktailCardService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CocktailDetailComponent,\n      selectors: [[\"app-cocktail-detail\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"cocktail-detail-card\", 4, \"ngIf\"], [1, \"cocktail-detail-card\"], [3, \"src\", \"alt\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function CocktailDetailComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, CocktailDetailComponent_div_0_Template, 22, 7, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.cocktail);\n        }\n      },\n      dependencies: [CommonModule, i3.NgForOf, i3.NgIf, RouterModule],\n      styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%];\\n\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\tvar __webpack_modules__ = ({\\n\\n\\n 498:\\n\\n\\n\\n\\n\\n (() => {\\n\\nthrow new Error(\\\"Module build failed (from ./node_modules/postcss-loader/dist/cjs.js):\\\\n\\\\nSyntaxError\\\\n\\\\n(8:5) /Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/cocktail-detail/cocktail-detail.component.css Unknown word\\\\n\\\\n \\\\u001b[90m  6 | \\\\u001b[39m    justify-content\\\\u001b[33m:\\\\u001b[39m space-evenly\\\\u001b[33m;\\\\u001b[39m\\\\n \\\\u001b[90m  7 | \\\\u001b[39m    width\\\\u001b[33m:\\\\u001b[39m 85%\\\\u001b[33m;\\\\u001b[39m\\\\n\\\\u001b[1m\\\\u001b[31m>\\\\u001b[39m\\\\u001b[22m\\\\u001b[90m  8 | \\\\u001b[39m    border\\\\n \\\\u001b[90m    | \\\\u001b[39m    \\\\u001b[1m\\\\u001b[31m^\\\\u001b[39m\\\\u001b[22m\\\\n \\\\u001b[90m  9 | \\\\u001b[39m\\\\u001b[33m}\\\\u001b[39m\\\\n \\\\u001b[90m 10 | \\\\u001b[39m\\\\n\\\");\\n\\n\\n })\\n\\n\\n \\t})[_ngcontent-%COMP%];\\n\\n\\n\\n \\t\\n\\n \\t//[_ngcontent-%COMP%]   startup\\n\\n[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   Load[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   return[_ngcontent-%COMP%]   exports\\n\\n[_ngcontent-%COMP%]   //[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   entry[_ngcontent-%COMP%]   module[_ngcontent-%COMP%]   doesn't[_ngcontent-%COMP%]   tell[_ngcontent-%COMP%]   about[_ngcontent-%COMP%]   it's[_ngcontent-%COMP%]   top-level[_ngcontent-%COMP%]   declarations[_ngcontent-%COMP%]   so[_ngcontent-%COMP%]   it[_ngcontent-%COMP%]   can't[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   inlined\\n\\n[_ngcontent-%COMP%]   var[_ngcontent-%COMP%]   __webpack_exports__[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] {};\\n\\n \\t__webpack_modules__[498]();\\n\\n \\tresource = __webpack_exports__;\\n\\n \\t\\n\\n })()\\n;\\n/*# sourceMappingURL=cocktail-detail.component.css.map*/\"]\n    });\n  }\n  return CocktailDetailComponent;\n})();","map":{"version":3,"names":["RouterModule","CommonModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","ingredient_r1","ingredient","measure","ɵɵelement","ɵɵtemplate","CocktailDetailComponent_div_0_li_21_Template","ɵɵtextInterpolate","ctx_r1","cocktail","strDrink","ɵɵpropertyInterpolate","ɵɵproperty","strDrinkThumb","ɵɵsanitizeUrl","ɵɵtextInterpolate1","strCategory","strGlass","strInstructions","getIngredientsList","CocktailDetailComponent","route","cocktailcardservice","constructor","ngOnInit","cocktailId","snapshot","paramMap","get","getCocktailDetailsById","subscribe","next","response","drinks","error","console","ingredients","i","push","trim","ɵɵdirectiveInject","i1","ActivatedRoute","i2","CocktailCardService","selectors","decls","vars","consts","template","CocktailDetailComponent_Template","rf","ctx","CocktailDetailComponent_div_0_Template","i3","NgForOf","NgIf","styles"],"sources":["/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/cocktail-detail/cocktail-detail.component.ts","/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/cocktail-detail/cocktail-detail.component.html"],"sourcesContent":["// this allows us to use the component decorator to pull in the css and html files and also gives us an initialization funtion we can call if we want \nimport { Component, OnInit } from '@angular/core';\n// So this enables angular routing. This does a lot of things but in this case it will let us pass the url from the url into our cocktail card service\nimport { ActivatedRoute, RouterModule } from '@angular/router'; \n// imports the cocktail card service which pulls the recipe for the card\nimport { CocktailCardService } from '../../services/cocktail-card.service';\nimport { CommonModule } from '@angular/common';\n\n// Tells angular the following class is a component and to use this info for it\n@Component({\n  selector: 'app-cocktail-detail',\n  imports: [CommonModule, RouterModule],\n  templateUrl: './cocktail-detail.component.html',\n  styleUrl: './cocktail-detail.component.css'\n})\nexport class CocktailDetailComponent {\n  // sets a variable to hold the data from our observable\n  cocktail: any;\n\n  // runs these privately when a component is created and REMEMBER THIS IS HOW YOU INJECT DEPENDENCIES YOUVE DONE THIS A BUNCH \n  constructor(\n    // this listens to changes in the URL and lets you grab the query parameters. remember we need the cocktail ID to search for it\n    private route: ActivatedRoute,\n    private cocktailcardservice: CocktailCardService,\n  ) {}\n\n// this is a life cycle hook in angualr that runs automagically when the component loads\n  ngOnInit(): void {\n\n    // grabs the id from the url this.route refers to the injected dependency in the constructor, .snapshot is a property of the dependency that contains a static snapshot of the route at the time of the request .paramMap is an object that provides access to route paratmesters. they are defined in the route with a colon: an example is /cocktial/:id. finally the .get gets the parameters from paramMap with the given variable in the call in this case id\n    const cocktailId = this.route.snapshot.paramMap.get('id');\n\n    // an if statement saying if there is a cocktailId then we do this\n    if(cocktailId) {\n      // this calls our cocktail card servcice to get the cocktails by the id we snagged early and subsribes to the obervable of the service\n      this.cocktailcardservice.getCocktailDetailsById(cocktailId).subscribe(\n        {\n          // next means it happens if the api responds sucessfully and it uses the ternary operator to set cocktail = to the response and = to null if there are no drinks so the app doesn't crash\n          next: (response) => {this.cocktail = response.drinks ? response.drinks[0]: null;\n\n            // So basically if there is a response from the api it calls the get ingredients function\n            if (this.cocktail) {\n            this.getIngredientsList();\n            }\n          },\n          // error is what displays if the observable or api fails\n          error: (error) => {console.error('Error fetching cocktail details', error);},\n          \n        }\n      \n      );\n\n    }\n  }\n\n  getIngredientsList() {\n    // Okay so this creates an array of objects {}[] in typescript we have to declare the types of the values coming from the object which is an ingredient: with a string data type and a measure: also with a string data type.\n    const ingredients: { ingredient: string; measure: string}[] = []\n    \n    for (let i = 1; i <= 15; i++) {\n      // creates an ingredient variable that pulls from the cocktail object returned by the api. The api gives its response like this {'strIngredient1': 'tequila', 'strIngredient2': ''} since this object is one index we use one of those fancy strings that we can put variables in and incremement the number at the end. following that we declare a variable for measure that does the same thing\n      const ingredient = this.cocktail[`strIngredient${i}`];\n      const measure = this.cocktail[`strMeasure${i}`];\n      if (ingredient) {\n        ingredients.push({\n          ingredient,\n          measure: measure ? measure.trim() : ''\n        });\n      }\n    }\n    return ingredients\n  } \n}\n","<!-- the *ngIf means to only display it if cocktail exists -->\n<div *ngIf=\"cocktail\"  class=\"cocktail-detail-card\">\n    <h2>{{ cocktail.strDrink }}</h2>\n    <img [src]=\"cocktail.strDrinkThumb\" alt=\"{{ cocktail.strDrink }}\"/>\n    <div>\n    <p><strong>Category:</strong> {{ cocktail.strCategory }}</p>\n    <p><strong>Glass:</strong> {{ cocktail.strGlass }}</p>\n    <p><strong>Instructions:</strong> {{cocktail.strInstructions }}</p>\n\n    <div>\n        <h4>Ingredients</h4>\n        <ul>\n            <!-- ngFor creates a list element  with the properties below -->\n            <li *ngFor=\"let ingredient of getIngredientsList()\">\n                {{ ingredient.ingredient }} - {{ ingredient.measure }}\n            </li>\n        </ul>\n    </div>\n    </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}