{"ast":null,"code":"// So this enables angular routing. This does a lot of things but in this case it will let us pass the url from the url into our cocktail card service\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/cocktail-card.service\";\nimport * as i3 from \"@angular/common\";\nfunction CocktailDetailComponent_li_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ingredient_r1 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", ingredient_r1.ingredient, \" - \", ingredient_r1.measure, \" \");\n  }\n}\n// Tells angular the following class is a component and to use this info for it\nexport let CocktailDetailComponent = /*#__PURE__*/(() => {\n  class CocktailDetailComponent {\n    route;\n    cocktailcardservice;\n    // sets a variable to hold the data from our observable\n    cocktail;\n    // runs these privately when a component is created and REMEMBER THIS IS HOW YOU INJECT DEPENDENCIES YOUVE DONE THIS A BUNCH \n    constructor(\n    // this listens to changes in the URL and lets you grab the query parameters. remember we need the cocktail ID to search for it\n    route, cocktailcardservice) {\n      this.route = route;\n      this.cocktailcardservice = cocktailcardservice;\n    }\n    // this is a life cycle hook in angualr that runs automagically when the component loads\n    ngOnInit() {\n      // grabs the id from the url this.route refers to the injected dependency in the constructor, .snapshot is a property of the dependency that contains a static snapshot of the route at the time of the request .paramMap is an object that provides access to route paratmesters. they are defined in the route with a colon: an example is /cocktial/:id. finally the .get gets the parameters from paramMap with the given variable in the call in this case id\n      const cocktailId = this.route.snapshot.paramMap.get('id');\n      // an if statement saying if there is a cocktailId then we do this\n      if (cocktailId) {\n        // this calls our cocktail card servcice to get the cocktails by the id we snagged early and subsribes to the obervable of the service\n        this.cocktailcardservice.getCocktailDetailsById(cocktailId).subscribe({\n          // next means it happens if the api responds sucessfully and it uses the ternary operator to set cocktail = to the response and = to null if there are no drinks so the app doesn't crash\n          next: response => {\n            this.cocktail = response.drinks ? response.drinks[0] : null;\n            // So basically if there is a response from the api it calls the get ingredients function\n            if (this.cocktail) {\n              this.getIngredientsList();\n            }\n          },\n          // error is what displays if the observable or api fails\n          error: error => {\n            console.error('Error fetching cocktail details', error);\n          }\n        });\n      }\n    }\n    getIngredientsList() {\n      // Okay so this creates an array of objects {}[] in typescript we have to declare the types of the values coming from the object which is an ingredient: with a string data type and a measure: also with a string data type.\n      const ingredients = [];\n      for (let i = 1; i <= 15; i++) {\n        // creates an ingredient variable that pulls from the cocktail object returned by the api. The api gives its response like this {'strIngredient1': 'tequila', 'strIngredient2': ''} since this object is one index we use one of those fancy strings that we can put variables in and incremement the number at the end. following that we declare a variable for measure that does the same thing\n        const ingredient = this.cocktail[`strIngredient${i}`];\n        const measure = this.cocktail[`strMeasure${i}`];\n        if (ingredient) {\n          ingredients.push({\n            ingredient,\n            measure: measure ? measure.trim() : ''\n          });\n        }\n      }\n      return ingredients;\n    }\n    static ɵfac = function CocktailDetailComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CocktailDetailComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CocktailCardService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CocktailDetailComponent,\n      selectors: [[\"app-cocktail-detail\"]],\n      decls: 21,\n      vars: 7,\n      consts: [[1, \"cocktail-detail-card\"], [3, \"src\", \"alt\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function CocktailDetailComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"img\", 1);\n          i0.ɵɵelementStart(4, \"p\")(5, \"strong\");\n          i0.ɵɵtext(6, \"Category:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"p\")(9, \"strong\");\n          i0.ɵɵtext(10, \"Glass:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"p\")(13, \"strong\");\n          i0.ɵɵtext(14, \"Instructions:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"div\")(17, \"h4\");\n          i0.ɵɵtext(18, \"Ingredients\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"ul\");\n          i0.ɵɵtemplate(20, CocktailDetailComponent_li_20_Template, 2, 2, \"li\", 2);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.cocktail.strDrink);\n          i0.ɵɵadvance();\n          i0.ɵɵpropertyInterpolate(\"alt\", ctx.cocktail.strDrink);\n          i0.ɵɵproperty(\"src\", ctx.cocktail.strDrinkThumb, i0.ɵɵsanitizeUrl);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.cocktail.strCategory, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.cocktail.strGlass, \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" \", ctx.cocktail.strInstructions, \"\");\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.getIngredientsList());\n        }\n      },\n      dependencies: [CommonModule, i3.NgForOf, RouterModule],\n      styles: [\".cocktail-detail-card[_ngcontent-%COMP%] {\\n    background-color: #adbb7f;\\n    width: 30%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9jb2NrdGFpbC1kZXRhaWwvY29ja3RhaWwtZGV0YWlsLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsVUFBVTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLmNvY2t0YWlsLWRldGFpbC1jYXJkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWRiYjdmO1xuICAgIHdpZHRoOiAzMCU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n  return CocktailDetailComponent;\n})();","map":{"version":3,"names":["RouterModule","CommonModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","ingredient_r1","ingredient","measure","CocktailDetailComponent","route","cocktailcardservice","cocktail","constructor","ngOnInit","cocktailId","snapshot","paramMap","get","getCocktailDetailsById","subscribe","next","response","drinks","getIngredientsList","error","console","ingredients","i","push","trim","ɵɵdirectiveInject","i1","ActivatedRoute","i2","CocktailCardService","selectors","decls","vars","consts","template","CocktailDetailComponent_Template","rf","ctx","ɵɵelement","ɵɵtemplate","CocktailDetailComponent_li_20_Template","ɵɵtextInterpolate","strDrink","ɵɵpropertyInterpolate","ɵɵproperty","strDrinkThumb","ɵɵsanitizeUrl","ɵɵtextInterpolate1","strCategory","strGlass","strInstructions","i3","NgForOf","styles"],"sources":["/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/cocktail-detail/cocktail-detail.component.ts","/Users/taylorkaser/coding/Cocktail-Chronicles/src/app/components/cocktail-detail/cocktail-detail.component.html"],"sourcesContent":["// this allows us to use the component decorator to pull in the css and html files and also gives us an initialization funtion we can call if we want \nimport { Component, OnInit } from '@angular/core';\n// So this enables angular routing. This does a lot of things but in this case it will let us pass the url from the url into our cocktail card service\nimport { ActivatedRoute, RouterModule } from '@angular/router'; \n// imports the cocktail card service which pulls the recipe for the card\nimport { CocktailCardService } from '../../services/cocktail-card.service';\nimport { CommonModule } from '@angular/common';\n\n// Tells angular the following class is a component and to use this info for it\n@Component({\n  selector: 'app-cocktail-detail',\n  imports: [CommonModule, RouterModule],\n  templateUrl: './cocktail-detail.component.html',\n  styleUrl: './cocktail-detail.component.css'\n})\nexport class CocktailDetailComponent {\n  // sets a variable to hold the data from our observable\n  cocktail: any;\n\n  // runs these privately when a component is created and REMEMBER THIS IS HOW YOU INJECT DEPENDENCIES YOUVE DONE THIS A BUNCH \n  constructor(\n    // this listens to changes in the URL and lets you grab the query parameters. remember we need the cocktail ID to search for it\n    private route: ActivatedRoute,\n    private cocktailcardservice: CocktailCardService,\n  ) {}\n\n// this is a life cycle hook in angualr that runs automagically when the component loads\n  ngOnInit(): void {\n\n    // grabs the id from the url this.route refers to the injected dependency in the constructor, .snapshot is a property of the dependency that contains a static snapshot of the route at the time of the request .paramMap is an object that provides access to route paratmesters. they are defined in the route with a colon: an example is /cocktial/:id. finally the .get gets the parameters from paramMap with the given variable in the call in this case id\n    const cocktailId = this.route.snapshot.paramMap.get('id');\n\n    // an if statement saying if there is a cocktailId then we do this\n    if(cocktailId) {\n      // this calls our cocktail card servcice to get the cocktails by the id we snagged early and subsribes to the obervable of the service\n      this.cocktailcardservice.getCocktailDetailsById(cocktailId).subscribe(\n        {\n          // next means it happens if the api responds sucessfully and it uses the ternary operator to set cocktail = to the response and = to null if there are no drinks so the app doesn't crash\n          next: (response) => {this.cocktail = response.drinks ? response.drinks[0]: null;\n\n            // So basically if there is a response from the api it calls the get ingredients function\n            if (this.cocktail) {\n            this.getIngredientsList();\n            }\n          },\n          // error is what displays if the observable or api fails\n          error: (error) => {console.error('Error fetching cocktail details', error);},\n          \n        }\n      \n      );\n\n    }\n  }\n\n  getIngredientsList() {\n    // Okay so this creates an array of objects {}[] in typescript we have to declare the types of the values coming from the object which is an ingredient: with a string data type and a measure: also with a string data type.\n    const ingredients: { ingredient: string; measure: string}[] = []\n    \n    for (let i = 1; i <= 15; i++) {\n      // creates an ingredient variable that pulls from the cocktail object returned by the api. The api gives its response like this {'strIngredient1': 'tequila', 'strIngredient2': ''} since this object is one index we use one of those fancy strings that we can put variables in and incremement the number at the end. following that we declare a variable for measure that does the same thing\n      const ingredient = this.cocktail[`strIngredient${i}`];\n      const measure = this.cocktail[`strMeasure${i}`];\n      if (ingredient) {\n        ingredients.push({\n          ingredient,\n          measure: measure ? measure.trim() : ''\n        });\n      }\n    }\n    return ingredients\n  } \n}\n","<!-- the *ngIf means to only display it if cocktail exists -->\n<div  class=\"cocktail-detail-card\">\n    <h2>{{ cocktail.strDrink }}</h2>\n    <img [src]=\"cocktail.strDrinkThumb\" alt=\"{{ cocktail.strDrink }}\"/>\n\n    <p><strong>Category:</strong> {{ cocktail.strCategory }}</p>\n    <p><strong>Glass:</strong> {{ cocktail.strGlass }}</p>\n    <p><strong>Instructions:</strong> {{cocktail.strInstructions }}</p>\n\n    <div>\n        <h4>Ingredients</h4>\n        <ul>\n            <!-- ngFor creates a list element  with the properties below -->\n            <li *ngFor=\"let ingredient of getIngredientsList()\">\n                {{ ingredient.ingredient }} - {{ ingredient.measure }}\n            </li>\n        </ul>\n    </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}